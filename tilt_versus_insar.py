from sarlab.gammax import *import pandas as pdimport numpy as npimport osimport globfrom cr_phase_to_deformation import *from ptarg import phase_analysis_full_scene, subpixel_locations, ptarg_rslcsfrom active_layer import read_active_layer_templatetilt_site1 = pd.read_csv("/local-scratch/users/aplourde/field_data/site_1/site_1_inclinometer_processed.csv")tilt_site2 = pd.read_csv("/local-scratch/users/aplourde/field_data/site_2/site_2_inclinometer_processed.csv")WORKING_SITE = 1""" Jayson's HDS processedworking_dir = '/local-scratch/users/jaysone/projects_active/inuvik/RS2_U76_D/'sub_dir = 'small/'; master = '20170808'target_dir = working_dir + sub_dir + 'ptarg/'"""#""" My HDS processedworking_dir = '/local-scratch/users/aplourde/HDS/projects/southern_ITH/RS2_U76_D/'sub_dir = 'crop_sites/'; master = '20170808'#sub_dir = 'crop_sites_sb/'; master = '20170808'target_dir = working_dir + sub_dir + 'ptarg/'#"""cr_loc = working_dir + sub_dir + 'cr_loc.txt'"""obsptarg_cr1 = pd.read_csv("/local-scratch/users/aplourde/RS2/post_cr_installation/ptarg_vs_ovr/ptarg_parsed_output_cr1.csv")ptarg_cr2 = pd.read_csv("/local-scratch/users/aplourde/RS2/post_cr_installation/ptarg_vs_ovr/ptarg_parsed_output_cr2.csv")ptarg_chip_dir = '/local-scratch/users/aplourde/RS2/post_cr_installation/ptarg_site1/'"""ingest_cfg = {'password': 'S1m0nF7@SER', 'polarizations': 'HH'}stack = SLC_stack(dirname=working_dir + sub_dir,name='inuvik_RS2_U76_D', master=master, looks_hr=(2,3), looks_lr=(12,18), multiprocess=True, rdcdem_refine=True, skipmode='None', ingest_cfg=ingest_cfg)def phase_from_rslc(rslcs, par, method = 'rslc_pixel', filter_bad_rslcs = False):    # extracts phase from rslc ptr_par files and computes interferometric phase    # filters out rslcs whose corner reflector point target    # locations are outside the cr pixel    if filter_bad_rslcs:        rslcs = subpixel_locations(rslcs, cr='cr1', ptarg_dir=target_dir)    else:        rslcs = [os.path.basename(rslc) for rslc in rslcs]    if method == 'ptr_par':        file_dir = target_dir    elif method == 'rslc_pixel':        file_dir = working_dir + sub_dir + 'rslc/'    cr1_df = mk_diff(rslcs, par, 'cr1', cr_loc, file_dir, phase_from=method)    cr2_df = mk_diff(rslcs, par, 'cr2', cr_loc, file_dir, phase_from=method)    cr1_df['def_m'] = phase_to_deformation(cr1_df['delta_phi'])    cr1_df['def_mm'] = cr1_df['def_m'] * 1000    cr2_df['def_m'] = phase_to_deformation(cr2_df['delta_phi'])    cr2_df['def_mm'] = cr2_df['def_m'] * 1000    #plot_piecewise(cr1_df, cr2_df)    #plot_phase(cr1_df, cr2_df)    return cr1_df, cr2_dfdef phase_from_diff(rslcs, par, diffs, dtype, crs=['cr1', 'cr2'], filter_bad_rslcs = False):    # extracts phase from interferograms    # filters out interferograms with rslcs whose corner reflector point target    # locations are outside the cr pixel    dis = 2*np.pi * 1.5    cr1_df = cr_phase(crs[0], cr_loc, diffs, master_par.dim, dtype=dtype)    cr1_df['def_m'] = phase_to_deformation(cr1_df['delta_phi'])    cr1_df['def_mm'] = cr1_df['def_m'] * 1000    cr1_df['delta_phi_unw'] = np.unwrap(cr1_df['delta_phi'], discont=dis)    cr1_df['def_m_unw'] = phase_to_deformation(cr1_df['delta_phi_unw'])    cr1_df['def_mm_unw'] = cr1_df['def_m'] * 1000    cr2_df = cr_phase(crs[1], cr_loc, diffs, master_par.dim, dtype=dtype)    cr2_df['def_m'] = phase_to_deformation(cr2_df['delta_phi'])    cr2_df['def_mm'] = cr2_df['def_m'] * 1000    cr2_df['delta_phi_unw'] = np.unwrap(cr2_df['delta_phi'], discont=dis)    cr2_df['def_m_unw'] = phase_to_deformation(cr2_df['delta_phi_unw'])    cr2_df['def_mm_unw'] = cr2_df['def_m'] * 1000    cr2_df['rel_def_unw_mm'] = phase_to_deformation(cr2_df['delta_phi_unw'] - cr1_df['delta_phi_unw'])*1000    if filter_bad_rslcs:        rslcs = subpixel_locations(rslcs, cr=crs[0], ptarg_dir=target_dir)        rslcs = np.asarray([rslc[:-5] for rslc in rslcs])        cr1_df = cr1_df[cr1_df['master'].isin(rslcs)]        cr2_df = cr2_df[cr2_df['master'].isin(rslcs)]        cr1_df = cr1_df[cr1_df['slave'].isin(rslcs)]        cr2_df = cr2_df[cr2_df['slave'].isin(rslcs)]    plot_piecewise(cr1_df, cr2_df)    #plot_phase(cr1_df, cr2_df)def crannulus(cra, crf, files, dim, dtype, blocksize, offset):    phi_cr = []    for file in files:        im = readBin(file, dim, dtype)        if 'complex' in dtype:            im_phi = np.angle(im)            mag = np.abs(im)        else:  # eg. unwrapped interferogram            im_phi = im            mag = im        basename = os.path.basename(file)        if 'slc' in basename:            slc = basename.split('.')[0]            master = slc            slave = None        else:            ifg = basename.split('.')[0]            master, slave = ifg.split('_')        delta_phi = np.nanmean(im_phi[cra[0] + offset:cra[0] + offset + blocksize, cra[1] + offset:cra[1] + offset + blocksize])        cra_annulus = im_phi[cra[0] - blocksize:cra[0] + blocksize - 1, cra[1] - blocksize:cra[1] + blocksize - 1]        cra_annulus[blocksize - 2:blocksize + 1, blocksize - 2:blocksize + 1] = 0        # plt.imshow(cr1_annulus)        # plt.show()        # break        cra_annulus = np.nanmean(cra_annulus)        crf_annulus = im_phi[crf[0] - blocksize:crf[0] + blocksize, crf[1] - blocksize:crf[1] + blocksize]        crf_annulus[blocksize - 2:blocksize + 2, blocksize - 2:blocksize + 2] = 0        crf_annulus = np.nanmean(crf_annulus)        phi_cr.append((master, slave, delta_phi, cra_annulus, crf_annulus))    return phi_crdef phase_from_block(rslcs, par, diffs, dtype, crs, offset=5, blocksize=10, hold='off', phase_files='diff'):    # extracts phase from block of pixels excluding cr    cr1 = unpack_cr_coords(cr_loc)[crs[0]]    cr2 = unpack_cr_coords(cr_loc)[crs[1]]    if 'diff' in phase_files:        cr1_df = cr_phase(crs[0], cr_loc, diffs, master_par.dim, dtype=dtype)        cr1_df['def_m'] = phase_to_deformation(cr1_df['delta_phi'])        cr1_df['def_mm'] = cr1_df['def_m'] * 1000        cr2_df = cr_phase(crs[1], cr_loc, diffs, master_par.dim, dtype=dtype)        cr2_df['def_m'] = phase_to_deformation(cr2_df['delta_phi'])        cr2_df['def_mm'] = cr2_df['def_m'] * 1000        phi_cr = crannulus(cr1, cr2, diffs, par.dim, dtype, blocksize, offset)        block_df = pd.DataFrame(data=phi_cr, columns=['master', 'slave', 'delta_phi', 'cr1_annulus', 'cr2_annulus'])        block_df['def_m'] = phase_to_deformation(block_df['delta_phi'])        block_df['def_mm'] = block_df['def_m'] * 1000        cr1_df['annulus'] = np.angle(np.exp(1j * (cr1_df['delta_phi'] - block_df['cr1_annulus'])))        cr2_df['annulus'] = np.angle(np.exp(1j * (cr2_df['delta_phi'] - block_df['cr2_annulus'])))    elif 'rslc' in phase_files:        cr1_df, cr2_df = phase_from_rslc(rslcs, par, method='rslc_pixel', filter_bad_rslcs=False)        #cr1_df, cr2_df = phase_from_rslc(rslcs, par, method='ptr_par', filter_bad_rslcs=False)        rslc_dir = working_dir + sub_dir + 'rslc/'        craa = mk_diff(rslcs, par, 'cr1', cr_loc, rslc_dir, phase_from='annulus')        crfa = mk_diff(rslcs, par, 'cr2', cr_loc, rslc_dir, phase_from='annulus')        cr1_df['annulus'] = craa['delta_phi']        cr2_df['annulus'] = crfa['delta_phi']    #plot_piecewise(cr1_df, block_df, hold=hold)    #plot_phase(cr1_df, cr2_df, block_df)    plot_phase(cr1_df, cr2_df)def phase_from_svd(rslcs, par, diffs, dtype, filter_bad_rslcs = False):    # extracts phase from interferograms    # filters out interferograms with rslcs whose corner reflector point target    # locations are outside the cr pixel    master = pd.to_datetime('20140707')    tilt_site1.index = pd.to_datetime(tilt_site1[list(tilt_site1)[0]])    tilt_site2.index = pd.to_datetime(tilt_site2[list(tilt_site2)[0]])    plt.plot(tilt_site1.index, tilt_site1.dh1_mm, color='black')    #plt.plot(tilt_site2.index, tilt_site2.dh2_mm, color='grey')    #crs = ['cr2', 'cr4', 'cr5', 'cr6']  # floating    crs = ['cr2']    for cr in crs:        coord = unpack_cr_coords(cr_loc)[cr]        hgt_cr = []        for diff in diffs:            slave = pd.to_datetime(os.path.basename(diff).split('.')[0])            im = readBin(diff, par.dim, dtype)            hgt = im[coord[0], coord[1]]*10 # convert cm to mm            hgt_cr.append((master, slave, hgt))        df = pd.DataFrame(data=hgt_cr, columns=['master', 'slave', 'hgt'])        df = df.sort_values(by='slave')        plt.plot(df['slave'], df['hgt'], label=cr)    plt.legend()    plt.show()def def_from_hds(def_dir, clr, lbl, cr = 'cr2'):    files = glob.glob(def_dir + '/*.vert.2d')    tilt_site1.index = pd.to_datetime(tilt_site1[list(tilt_site1)[0]])    #tilt_site2.index = pd.to_datetime(tilt_site2[list(tilt_site2)[0]])    plt.plot(tilt_site1.index, tilt_site1.dh1_mm, color='black')    vert_def_mm = []    #off_mm = []    dates = []    #WATCH OUT!    cr_txt = working_dir + 'crop_sites/' + 'cr_loc.txt'    crc = unpack_cr_coords(cr_txt)[cr]    cr1 = unpack_cr_coords(cr_txt)['cr1']    cr2 = unpack_cr_coords(cr_txt)['cr2']    #off = (cr2[0]-5, cr2[1]+100)    for file in files:        basename = os.path.basename(file)        date = pd.to_datetime(basename.split('.')[0])        if date >= pd.to_datetime('20130827'):            im = readBin(file, [996,2592], 'float32')            #plt.imshow(im.T)            #plt.show()            vert_def_mm.append(im[crc[0], crc[1]]*1000)            #off_mm.append(im[off[0], off[1]]*1000)            dates.append(date)            #print(im[cr1[0], cr1[1]])        hndl, = plt.plot(dates, vert_def_mm, color=clr, label=lbl)        plt.scatter(dates, vert_def_mm, color=clr, label=lbl)    return hndldef plot_phase(cra_df, crf_df, crb_df = None, hold='off'):    cra_df['master'] = pd.to_datetime(cra_df['master'])    cra_df['slave'] = pd.to_datetime(cra_df['slave'])    crf_df['master'] = pd.to_datetime(crf_df['master'])    crf_df['slave'] = pd.to_datetime(crf_df['slave'])    if crb_df is not None:        crb_df['master'] = pd.to_datetime(crb_df['master'])        crb_df['slave'] = pd.to_datetime(crb_df['slave'])    legend = []    #plt.subplot(211)    dsc = np.pi    cra_df['delta_phi_timeseries'] = cra_df['delta_phi'].cumsum()    crf_df['delta_phi_timeseries'] = crf_df['delta_phi'].cumsum()    plt.plot(crf_df['slave'], crf_df['delta_phi_timeseries'], color='blue')    plt.plot(cra_df['slave'], cra_df['delta_phi_timeseries'], color='pink')    cra_df['phi_unw'] = np.unwrap(cra_df['delta_phi_timeseries'], discont=dsc)    crf_df['phi_unw'] = np.unwrap(crf_df['delta_phi_timeseries'], discont=dsc)    #"""Relative Phase using CR Annulus    cra_df['rel_phi'] = cra_df['delta_phi'] - cra_df['annulus']    crf_df['rel_phi'] = crf_df['delta_phi'] - crf_df['annulus']    cra_df['rel_phi_timeseries'] = cra_df['rel_phi'].cumsum()    crf_df['rel_phi_timeseries'] = crf_df['rel_phi'].cumsum()    cra_df['rel_unw'] = np.unwrap(cra_df['rel_phi_timeseries'], discont=dsc)    crf_df['rel_unw'] = np.unwrap(crf_df['rel_phi_timeseries'], discont=dsc)    rau, = plt.plot(cra_df['slave'], cra_df['rel_unw'], label='rel a_unw', color='red')    rfu, = plt.plot(crf_df['slave'], crf_df['rel_unw'], label='rel f_unw', color='blue')    plt.scatter(cra_df['slave'], cra_df['rel_unw'], label='rel a_unw', color='red')    plt.scatter(crf_df['slave'], crf_df['rel_unw'], label='rel f_unw', color='blue')    aau, = plt.plot(cra_df['slave'], cra_df['annulus'].cumsum(), label='a annulus', color='brown')    afu, = plt.plot(crf_df['slave'], crf_df['annulus'].cumsum(), label='f annulus', color='darkblue')    plt.scatter(cra_df['slave'], cra_df['annulus'].cumsum(), label='a annulus', color='brown')    plt.scatter(crf_df['slave'], crf_df['annulus'].cumsum(), label='f annulus', color='darkblue')    legend.append(rau)    legend.append(rfu)    legend.append(aau)    legend.append(afu)    #"""    au, = plt.plot(cra_df['slave'], cra_df['phi_unw'], '--', label='a_unw', color='orange')    fu, = plt.plot(crf_df['slave'], crf_df['phi_unw'], '--', label='f_unw', color='lightblue')    #du, = plt.plot(crf_df['slave'], crf_df['phi_unw']-cra_df['phi_unw'], label='f - a', color='teal')    #plt.scatter(crf_df['slave'], crf_df['phi_unw'] - cra_df['phi_unw'], color='teal')    plt.scatter(cra_df['slave'], cra_df['phi_unw'], label='a_unw', color='orange')    plt.scatter(crf_df['slave'], crf_df['phi_unw'], label='f_unw', color='lightblue')    plt.ylabel('Phase (rad)')    legend.append(au)    legend.append(fu)    #legend.append(du)    plt.suptitle('Relative CR phase\n(cr - background)')    plt.legend(handles=legend)    #plt.ylim([-np.pi, np.pi])    plt.xlim([cra_df['master'].values[0]-pd.DateOffset(days=2), cra_df['slave'].values[-1]+pd.DateOffset(days=2)])    """#subplot piecewise    plt.subplot(212)    if WORKING_SITE==1:        tilt = tilt_site1        tilt.index = pd.to_datetime(tilt[list(tilt)[0]])        plt.plot(tilt_site1.index, tilt_site1.dh1_mm, color='black')        #dh_mm = np.asarray(phase_to_deformation(crf_df['phi_unw'] - cra_df['phi_unw'])*1000)        #dh_mm = np.asarray(phase_to_deformation(crf_df['phi_unw'])*1000)        dh_mm = np.asarray(crf_df['delta_phi_timeseries'])*10        dh_mm_rel = np.diff(dh_mm)        dh_mm_rel = np.insert(dh_mm_rel, 0, dh_mm[0])        for i in range(len(crf_df)):            master_date = crf_df['master'].values[i]            slave_date = crf_df['slave'].values[i]            try:                if WORKING_SITE == 1:                    start_val = tilt['dh1_mm'][tilt.index == master_date].values[0]                if WORKING_SITE == 2:                    start_val = tilt['dh2_mm'][tilt.index == master_date].values[0]            except:                continue            end_val = start_val + dh_mm_rel[i]            plt.plot([master_date, slave_date], [start_val, end_val], color='teal', label='Relative Def')        plt.xlim([cra_df['master'].values[0]-pd.DateOffset(days=2), cra_df['slave'].values[-1]+pd.DateOffset(days=2)])        plt.ylim([-40, 60])        plt.ylabel('Vertical Deformation (mm)')    elif WORKING_SITE==2:        tilt = tilt_site2        tilt.index = pd.to_datetime(tilt[list(tilt)[0]])        plt.plot(tilt_site2.index, tilt_site2.dh2_mm, color='black')    #"""    if hold == 'off':        plt.show()def plot_piecewise(cra_df, crf_df, hold='off'):    if WORKING_SITE==1:        tilt = tilt_site1        tilt.index = pd.to_datetime(tilt[list(tilt)[0]])        plt.plot(tilt_site1.index, tilt_site1.dh1_mm, color='black')    elif WORKING_SITE==2:        tilt = tilt_site2        tilt.index = pd.to_datetime(tilt[list(tilt)[0]])        plt.plot(tilt_site2.index, tilt_site2.dh2_mm, color='black')    for i in range(len(crf_df)):        master_date = pd.to_datetime(crf_df['master'].values[i])        slave_date = pd.to_datetime(crf_df['slave'].values[i])        try:            if WORKING_SITE == 1:                start_val = tilt['dh1_mm'][tilt.index == master_date].values[0]            if WORKING_SITE == 2:                start_val = tilt['dh2_mm'][tilt.index == master_date].values[0]        except:            continue        cra = cra_df['def_mm'].values[i]        crf = crf_df['def_mm'].values[i]        end_val = start_val + (crf - cra)        #end_val = start_val + np.angle(np.exp(1j*(crf - cra))) #phase wrap??        d, = plt.plot([master_date, slave_date], [start_val, end_val], color='green', label='crF - crA')        end_val = start_val + crf        f, = plt.plot([master_date, slave_date], [start_val, end_val], color='blue', label='crF')        end_val = start_val + cra        #a, = plt.plot([master_date, slave_date], [start_val, end_val], color='yellow', label='cr1')    plt.plot(pd.to_datetime(cra_df['slave']), cra_df['def_mm_unw'])    plt.plot(pd.to_datetime(crf_df['slave']), crf_df['def_mm_unw'])    plt.plot(pd.to_datetime(crf_df['slave']), crf_df['rel_def_unw_mm'])    plt.legend(handles=[d,f])    if hold=='off':        plt.show()if __name__ == "__main__":    rslcs = stack.rslc_list()    # get rslcs where cr's are present    pt_rslcs = ptarg_rslcs('cr1', rslcs)    master_par = stack.master_slc_par    diffs = glob.glob(working_dir + sub_dir + 'diff/*diff'); dtype = 'complex64'    #diffs = glob.glob(working_dir + sub_dir + 'diff/*diff.natm'); dtype='complex64'    #diffs = glob.glob(working_dir + sub_dir + 'diff/*diff.natm.hds'); dtype = 'complex64'    #diffs = glob.glob(working_dir + sub_dir + 'hds/select/*.diff.natm.hds.unw.2d'); dtype = 'float32'    #diffs = glob.glob(working_dir + sub_dir + 'hds/svd/*.svd.2d'); dtype = 'float32'    itab = working_dir + sub_dir + 'itab_postcr_lf'    RSLC_tab = working_dir + sub_dir + 'RSLC_tab'    diffs = get_itab_diffs(diffs, itab, RSLC_tab)    ### Tilt versus InSAR Plots ###    #phase_from_diff(pt_rslcs, master_par, diffs, dtype, crs=['cr1', 'cr2'], filter_bad_rslcs=False)    #phase_from_block(pt_rslcs, master_par, diffs, dtype, crs=['cr1', 'cr2'], blocksize=10, hold='off')    #phase_from_block(pt_rslcs, master_par, diffs, dtype, crs=['cr1', 'cr2'], blocksize=10, hold='off', phase_files='rslc')    #phase_from_block(pt_rslcs, master_par, diffs, dtype, offset=5, blocksize=10, hold='on')    #phase_from_block(pt_rslcs, master_par, diffs, dtype, offset=15, blocksize=10, hold='on')    #phase_from_block(pt_rslcs, master_par, diffs, dtype, offset=25, blocksize=10, hold='on')    #plt.show()    #phase_from_rslc(pt_rslcs, master_par, method ='rslc_pixel', filter_bad_rslcs=False)    #phase_from_rslc(pt_rslcs, master_par, method='ptr_par', filter_bad_rslcs=False)    #plt.show()    #diffs = glob.glob(working_dir + sub_dir + 'hds/svd/*.svd.2d');dtype = 'float32'    #phase_from_svd(pt_rslcs, master_par, diffs, dtype, filter_bad_rslcs=False)    ### HDS Deformation Output ##    """    target_cr = 'cr1'    plt.title('HDS SVD Vertical Deformation\n{}'.format(target_cr))    handle = []    dates, vals = read_active_layer_template('/local-scratch/users/aplourde/HDS/projects/southern_ITH/RS2_U76_D/active_layer.txt')    dates = pd.to_datetime(dates)    al, = plt.plot(dates,vals, label = 'active layer model')    plt.scatter(dates, vals)    handle.append(al)    def_dir = '/local-scratch/users/jaysone/projects_active/inuvik/RS2_U76_D/small/hds/def'    handle.append(def_from_hds(def_dir, 'thistle', 'Mid Quality (MQ)', cr=target_cr))    def_dir = '/local-scratch/users/aplourde/HDS/projects/southern_ITH/RS2_U76_D/crop_sites/hds/def'    handle.append(def_from_hds(def_dir, 'violet', 'MQ with LFs (wLF)', cr=target_cr))    def_dir = '/local-scratch/users/aplourde/quadzilla_desktop/def_dhrm'    handle.append(def_from_hds(def_dir, 'fuchsia', 'MQwLF dhcorr', cr=target_cr))    #def_dir = '/local-scratch/users/aplourde/quadzilla_desktop/def_rerefine'    #handle.append(def_from_hds(def_dir, 'purple', 'MQwLF refined', cr=target_cr))    plt.legend(handles=handle)    plt.show()    """